// This file is generated by kconfig_compiler from smartpinyin.kcfg.
// All changes you do to this file will be lost.
#ifndef SMARTPINYINCONFIG_H
#define SMARTPINYINCONFIG_H

#include <kconfigskeleton.h>

class SmartPinyinConfig : public KConfigSkeleton
{
  public:

    static SmartPinyinConfig *self();
    ~SmartPinyinConfig();

    /**
      Get Lookup table should always be shown
    */
    static
    bool _IMEngine_Pinyin_AlwaysShowLookup()
    {
      return self()->m_IMEngine_Pinyin_AlwaysShowLookup;
    }

    /**
      Get Whether to enable ambiguities pinyin
    */
    static
    bool _IMEngine_Pinyin_Ambiguities()
    {
      return self()->m_IMEngine_Pinyin_Ambiguities;
    }

    /**
      Get Ambiguity of An and Ang
    */
    static
    bool _IMEngine_Pinyin_Ambiguity_AnAng()
    {
      return self()->m_IMEngine_Pinyin_Ambiguity_AnAng;
    }

    /**
      Get Ambiguity of En and Eng
    */
    static
    bool _IMEngine_Pinyin_Ambiguity_EnEng()
    {
      return self()->m_IMEngine_Pinyin_Ambiguity_EnEng;
    }

    /**
      Get Ambiguity of In and Ing
    */
    static
    bool _IMEngine_Pinyin_Ambiguity_InIng()
    {
      return self()->m_IMEngine_Pinyin_Ambiguity_InIng;
    }

    /**
      Get Ambiguity of Zh and Z
    */
    static
    bool _IMEngine_Pinyin_Ambiguity_ZhiZi()
    {
      return self()->m_IMEngine_Pinyin_Ambiguity_ZhiZi;
    }

    /**
      Get Ambiguity of Ch and C
    */
    static
    bool _IMEngine_Pinyin_Ambiguity_ChiCi()
    {
      return self()->m_IMEngine_Pinyin_Ambiguity_ChiCi;
    }

    /**
      Get Ambiguity of Sh and S
    */
    static
    bool _IMEngine_Pinyin_Ambiguity_ShiSi()
    {
      return self()->m_IMEngine_Pinyin_Ambiguity_ShiSi;
    }

    /**
      Get Ambiguity of Fo and He
    */
    static
    bool _IMEngine_Pinyin_Ambiguity_FoHe()
    {
      return self()->m_IMEngine_Pinyin_Ambiguity_FoHe;
    }

    /**
      Get Ambiguity of Le and Ri
    */
    static
    bool _IMEngine_Pinyin_Ambiguity_LeRi()
    {
      return self()->m_IMEngine_Pinyin_Ambiguity_LeRi;
    }

    /**
      Get Ambiguity of Ne and Le
    */
    static
    bool _IMEngine_Pinyin_Ambiguity_NeLe()
    {
      return self()->m_IMEngine_Pinyin_Ambiguity_NeLe;
    }

    /**
      Get What's this???
    */
    static
    bool _IMEngine_Pinyin_Ambiguity_Any()
    {
      return self()->m_IMEngine_Pinyin_Ambiguity_Any;
    }

    /**
      Get Auto combine inputed character to phrase
    */
    static
    bool _IMEngine_Pinyin_AutoCombinePhrase()
    {
      return self()->m_IMEngine_Pinyin_AutoCombinePhrase;
    }

    /**
      Get Auto fill preedit area
    */
    static
    bool _IMEngine_Pinyin_AutoFillPreedit()
    {
      return self()->m_IMEngine_Pinyin_AutoFillPreedit;
    }

    /**
      Get no idea
    */
    static
    int _IMEngine_Pinyin_BurstStackSize()
    {
      return self()->m_IMEngine_Pinyin_BurstStackSize;
    }

    /**
      Get Chinese mode switch shortcut
    */
    static
    QString _IMEngine_Pinyin_ChineseSwitchKey()
    {
      return self()->m_IMEngine_Pinyin_ChineseSwitchKey;
    }

    /**
      Get Disable phrase
    */
    static
    QString _IMEngine_Pinyin_DisablePhraseKey()
    {
      return self()->m_IMEngine_Pinyin_DisablePhraseKey;
    }

    /**
      Get Enable dynamic adjust the frequences of phrases
    */
    static
    bool _IMEngine_Pinyin_DynamicAdjust()
    {
      return self()->m_IMEngine_Pinyin_DynamicAdjust;
    }

    /**
      Get This value will be added to a phrase just inputed
    */
    static
    int _IMEngine_Pinyin_DynamicSensitivity()
    {
      return self()->m_IMEngine_Pinyin_DynamicSensitivity;
    }

    /**
      Get Toggle full/half letter width shortcut
    */
    static
    QString _IMEngine_Pinyin_FullWidthLetterKey()
    {
      return self()->m_IMEngine_Pinyin_FullWidthLetterKey;
    }

    /**
      Get Toggle full/half punctuation width shortcut
    */
    static
    QString _IMEngine_Pinyin_FullWidthPunctKey()
    {
      return self()->m_IMEngine_Pinyin_FullWidthPunctKey;
    }

    /**
      Get Enable incomplete pinyin
    */
    static
    bool _IMEngine_Pinyin_Incomplete()
    {
      return self()->m_IMEngine_Pinyin_Incomplete;
    }

    /**
      Get Match longer phrase first
    */
    static
    bool _IMEngine_Pinyin_MatchLongerPhrase()
    {
      return self()->m_IMEngine_Pinyin_MatchLongerPhrase;
    }

    /**
      Get Max preedit string length
    */
    static
    int _IMEngine_Pinyin_MaxPreeditLength()
    {
      return self()->m_IMEngine_Pinyin_MaxPreeditLength;
    }

    /**
      Get The maximum characters of user defined phrase
    */
    static
    int _IMEngine_Pinyin_MaxUserPhraseLength()
    {
      return self()->m_IMEngine_Pinyin_MaxUserPhraseLength;
    }

    /**
      Get Pinyin mode switch shortcuts
    */
    static
    QString _IMEngine_Pinyin_ModeSwitchKey()
    {
      return self()->m_IMEngine_Pinyin_ModeSwitchKey;
    }

    /**
      Get Page down shortcut
    */
    static
    QString _IMEngine_Pinyin_PageDownKey()
    {
      return self()->m_IMEngine_Pinyin_PageDownKey;
    }

    /**
      Get Page up shortcut
    */
    static
    QString _IMEngine_Pinyin_PageUpKey()
    {
      return self()->m_IMEngine_Pinyin_PageUpKey;
    }

    /**
      Get The time interval of saving user usage info
    */
    static
    int _IMEngine_Pinyin_SavePeriod()
    {
      return self()->m_IMEngine_Pinyin_SavePeriod;
    }

    /**
      Get Show all keys
    */
    static
    bool _IMEngine_Pinyin_ShowAllKeys()
    {
      return self()->m_IMEngine_Pinyin_ShowAllKeys;
    }

    /**
      Get no idea
    */
    static
    int _IMEngine_Pinyin_SmartMatchLevel()
    {
      return self()->m_IMEngine_Pinyin_SmartMatchLevel;
    }

    /**
      Get Use tone
    */
    static
    bool _IMEngine_Pinyin_Tone()
    {
      return self()->m_IMEngine_Pinyin_Tone;
    }

    /**
      Get Save user data file in binary format
    */
    static
    bool _IMEngine_Pinyin_User_DataBinary()
    {
      return self()->m_IMEngine_Pinyin_User_DataBinary;
    }

    static
    void writeConfig()
    {
      static_cast<KConfigSkeleton*>(self())->writeConfig();
    }
  protected:
    SmartPinyinConfig();
    static SmartPinyinConfig *mSelf;


    // SCIM
    bool m_IMEngine_Pinyin_AlwaysShowLookup;
    bool m_IMEngine_Pinyin_Ambiguities;
    bool m_IMEngine_Pinyin_Ambiguity_AnAng;
    bool m_IMEngine_Pinyin_Ambiguity_EnEng;
    bool m_IMEngine_Pinyin_Ambiguity_InIng;
    bool m_IMEngine_Pinyin_Ambiguity_ZhiZi;
    bool m_IMEngine_Pinyin_Ambiguity_ChiCi;
    bool m_IMEngine_Pinyin_Ambiguity_ShiSi;
    bool m_IMEngine_Pinyin_Ambiguity_FoHe;
    bool m_IMEngine_Pinyin_Ambiguity_LeRi;
    bool m_IMEngine_Pinyin_Ambiguity_NeLe;
    bool m_IMEngine_Pinyin_Ambiguity_Any;
    bool m_IMEngine_Pinyin_AutoCombinePhrase;
    bool m_IMEngine_Pinyin_AutoFillPreedit;
    int m_IMEngine_Pinyin_BurstStackSize;
    QString m_IMEngine_Pinyin_ChineseSwitchKey;
    QString m_IMEngine_Pinyin_DisablePhraseKey;
    bool m_IMEngine_Pinyin_DynamicAdjust;
    int m_IMEngine_Pinyin_DynamicSensitivity;
    QString m_IMEngine_Pinyin_FullWidthLetterKey;
    QString m_IMEngine_Pinyin_FullWidthPunctKey;
    bool m_IMEngine_Pinyin_Incomplete;
    bool m_IMEngine_Pinyin_MatchLongerPhrase;
    int m_IMEngine_Pinyin_MaxPreeditLength;
    int m_IMEngine_Pinyin_MaxUserPhraseLength;
    QString m_IMEngine_Pinyin_ModeSwitchKey;
    QString m_IMEngine_Pinyin_PageDownKey;
    QString m_IMEngine_Pinyin_PageUpKey;
    int m_IMEngine_Pinyin_SavePeriod;
    bool m_IMEngine_Pinyin_ShowAllKeys;
    int m_IMEngine_Pinyin_SmartMatchLevel;
    bool m_IMEngine_Pinyin_Tone;
    bool m_IMEngine_Pinyin_User_DataBinary;

  private:
};

#endif

